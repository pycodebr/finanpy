# ============================================================================
# Finanpy Environment Variables
# ============================================================================
# Copy this file to .env and update with your actual values
# Command: cp .env.example .env
# NEVER commit .env to version control!

# ============================================================================
# Django Core Settings
# ============================================================================

# Django Secret Key - Used for cryptographic signing
# SECURITY WARNING: Keep this secret! Generate a new one for production!
# Generate with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=your-secret-key-here

# Debug Mode
# Set to True only in development environment
# MUST be False in production for security
DEBUG=True

# Allowed Hosts
# Comma-separated list of domains that can serve this application
# Development: localhost,127.0.0.1
# Production: yourdomain.com,www.yourdomain.com
ALLOWED_HOSTS=localhost,127.0.0.1

# ============================================================================
# Database Configuration
# ============================================================================

# Default: SQLite (file-based database, good for development)
# The application uses SQLite by default (db.sqlite3)
# No configuration needed for development

# PostgreSQL (recommended for production)
# Uncomment and configure for production deployment:
# DATABASE_URL=postgres://username:password@localhost:5432/finanpy

# MySQL alternative:
# DATABASE_URL=mysql://username:password@localhost:3306/finanpy

# ============================================================================
# TailwindCSS Configuration
# ============================================================================

# Path to npm binary (required for TailwindCSS compilation)
# Find your npm path:
#   - macOS/Linux: which npm
#   - Windows: where npm
# NPM_BIN_PATH=/usr/local/bin/npm

# ============================================================================
# Security Settings (Production Only)
# ============================================================================
# IMPORTANT: These settings are REQUIRED when deploying to production with HTTPS
# They are automatically enabled when DEBUG=False

# 6.9.1: Force HTTPS Redirect
# Redirects all HTTP requests to HTTPS
# Only enable this when you have a valid SSL certificate configured
# Default: True (when DEBUG=False)
# SECURE_SSL_REDIRECT=True

# 6.9.2: Session Cookie Security
# Ensures session cookies are only transmitted over HTTPS
# Protects against session hijacking on insecure networks
# Default: True (when DEBUG=False)
# SESSION_COOKIE_SECURE=True

# 6.9.3: CSRF Cookie Security
# Ensures CSRF protection cookies are only transmitted over HTTPS
# Protects against CSRF attacks via insecure channels
# Default: True (when DEBUG=False)
# CSRF_COOKIE_SECURE=True

# 6.9.4: HTTP Strict Transport Security (HSTS)
# Instructs browsers to ONLY use HTTPS for this domain
# Prevents protocol downgrade attacks and cookie hijacking

# HSTS max age in seconds (31536000 = 1 year recommended)
# Start with a lower value (e.g., 300) for testing, then increase
# WARNING: Once set, browsers will refuse HTTP connections for this duration
# SECURE_HSTS_SECONDS=31536000

# Apply HSTS policy to all subdomains
# Only enable if ALL subdomains support HTTPS
# SECURE_HSTS_INCLUDE_SUBDOMAINS=True

# Submit domain to browser HSTS preload lists
# Requires HSTS_SECONDS >= 1 year and INCLUDE_SUBDOMAINS=True
# See: https://hstspreload.org/
# SECURE_HSTS_PRELOAD=True

# Additional Security Headers (automatically enabled)
# These are configured in settings.py and don't require environment variables:
# - SECURE_CONTENT_TYPE_NOSNIFF=True (prevents MIME sniffing attacks)
# - SECURE_BROWSER_XSS_FILTER=True (enables browser XSS protection)
# - X_FRAME_OPTIONS='DENY' (prevents clickjacking by disabling iframes)

# ============================================================================
# Email Configuration (Optional)
# ============================================================================

# Email backend for sending emails (password reset, notifications, etc.)
# Development: use console backend to print emails to terminal
# EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# Production SMTP settings (example with Gmail):
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USE_TLS=True
# EMAIL_HOST_USER=your-email@gmail.com
# EMAIL_HOST_PASSWORD=your-app-specific-password
# DEFAULT_FROM_EMAIL=noreply@finanpy.com

# ============================================================================
# Setup Instructions
# ============================================================================

# 1. Copy this file:
#    cp .env.example .env
#
# 2. Edit .env and set your SECRET_KEY:
#    python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
#
# 3. Update other settings as needed for your environment
#
# 4. NEVER commit .env to version control (it's in .gitignore)
#
# 5. For production:
#    - Set DEBUG=False
#    - Use a strong SECRET_KEY
#    - Configure ALLOWED_HOSTS with your domain
#    - Use PostgreSQL or MySQL (not SQLite)
#    - Enable all security settings for HTTPS
